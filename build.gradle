buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:3.+'
    }
}

plugins {
    id "com.jfrog.artifactory" version "4.9.8"
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'maven-publish'
apply plugin: "com.jfrog.artifactory"

version = '0.2.0'
group = 'dev.dtrix'
archivesBaseName = 'carmanagement'

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8'

minecraft {
    mappings channel: 'snapshot', version: '20180814-1.12'

    runs {
        client {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'
        }

        server {
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'
        }
    }
}

repositories {
    maven { url = 'https://maven.dtrix.dev/artifactory/libs-release' }
    maven { url 'http://maven.dynamx.fr/artifactory/DynamXRepo' }
}

dependencies {
    minecraft 'net.minecraftforge:forge:1.12.2-14.23.5.2854'

    compile "dev.dtrix:dtrix-lib:0.1.3"
    compile "fr.dynamx:DynamX:2.16.5"
    compile (group: 'net.voxelindustry', name: 'brokkgui-binding-mc1.12', version: '1.0.0-63-SNAPSHOT')
}

jar {
    exclude('dev/dtrix/carmanagement/debug/**')

    manifest {
        attributes([
            "Specification-Title": "carmanagement",
            "Specification-Vendor": "carmanagement",
            "Specification-Version": "1", // We are version 1 of ourselves
            "Implementation-Title": project.name,
            "Implementation-Version": "${version}",
            "Implementation-Vendor" :"carmanagement",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

jar.finalizedBy('reobfJar')

sourceSets {
    main {
        output.resourcesDir = output.classesDir
    }
}

tasks.register("apiJar", Jar) {
    from sourceSets.main.output
    include '**/api/**'
    classifier 'api'
}

artifacts {
    archives jar
    archives apiJar
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
            artifact apiJar
        }
    }
}

artifactoryPublish.dependsOn build

artifactory {
    contextUrl = "${artifactory_contextUrl}"
    publish {
        repository {
            repoKey = 'diabolicatrix'
            username = "${artifactory_user}"
            password = "${artifactory_password}"
            maven = true
        }
        defaults {
            publications('mavenJava')
        }
    }
}

